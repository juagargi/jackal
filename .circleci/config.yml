# Copyright 2019 ETH Zurich
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  integration:
    docker:
      - image: circleci/python:3.6.1
    working_directory: ~/repo
    environment:
      BASH_ENV: "~/repo/.circleci/bash_env.sh"
      SCION_SRC: "https://github.com/netsec-ethz/netsec-scion"
      SC: "/home/scion/go/src/github.com/scionproto/scion"
      JACKAL_DIR: "/home/scion/go/src/github.com/ortuman/jackal"

    steps:
      - checkout

      - setup_remote_docker:
         docker_layer_caching: true

      # Start integration tests
      - run:
          name: Start containers
          command: |
            set -x
            export coreAS1301IP=172.31.0.110 infraAS1303IP=172.31.0.111 infraAS1305IP=172.31.0.112
            sudo -E docker-compose -f .circleci/docker-compose.yml create zookeeper coreAS1301 infraAS1303 infraAS1305
            sudo -E docker cp ./.circleci/setup/config/coreAS1301_config.tar coreAS1301:/tmp/host_config.tar
            sudo -E docker cp ./.circleci/setup/config/infraAS1303_config.tar infraAS1303:/tmp/host_config.tar
            sudo -E docker cp ./.circleci/setup/config/infraAS1305_config.tar infraAS1305:/tmp/host_config.tar
            sudo -E docker cp ./.circleci/setup/start_jackal.sh infraAS1303:${SC}/start_jackal.sh
            sudo -E docker cp ./.circleci/setup/start_jackal.sh infraAS1305:${SC}/start_jackal.sh
            sudo -E docker-compose -f .circleci/docker-compose.yml up --no-recreate -d zookeeper coreAS1301 infraAS1303 infraAS1305

      - run:
          name: Check SCION connections
          command: |
            set -x
            # Wait for the SCION services to start
            sudo -E docker exec coreAS1301 /bin/bash -c 'cd ${SC}; until [ `./supervisor/supervisor.sh status | grep RUNNING | wc -l` -ge 6 ]; do sleep 0.1; done;'
            # Wait for beaconing to start
            sudo -E docker exec infraAS1305 /bin/bash -c 'until [ `grep "Successfully verified PCB" -s -r ${SC}/logs/ | wc -l` -ge 5 ]; do sleep 0.1; done; ${SC}/bin/scmp echo -c 1 -local 19-ffaa:0:1305,[127.0.0.1] -remote 19-ffaa:0:1301,[127.0.0.1];'
            sudo -E docker exec coreAS1301 /bin/bash -c "${SC}/bin/scmp echo -c 1 -local 19-ffaa:0:1301,[127.0.0.1] -remote 19-ffaa:0:1303,[127.0.0.1]"
            sudo -E docker exec infraAS1303 /bin/bash -c "grep -m 5 'Successfully verified PCB' -r ${SC}/logs/; ${SC}/bin/scmp echo -c 1 -local 19-ffaa:0:1303,[127.0.0.1] -remote 19-ffaa:0:1301,[127.0.0.1];"

      - run:
          name: Start jackal servers
          command: |
            set -x
            sudo -E docker exec infraAS1303 /bin/bash -c '${SC}/start_jackal.sh;'
            sudo -E docker exec infraAS1303 /bin/bash -c 'until grep -q "19-ffaa:0:1303,\[127.0.0.1\]" ~/jackal/jackal.log; do sleep 1; done;'
            sudo -E docker exec infraAS1305 /bin/bash -c '${SC}/start_jackal.sh;'
            sudo -E docker exec infraAS1305 /bin/bash -c 'until grep -q "19-ffaa:0:1305,\[127.0.0.1\]" ~/jackal/jackal.log; do sleep 1; done;'

      - run:
          name: Start XMPP client1
          command: |
            set -x
            sudo -E docker-compose -f .circleci/docker-compose.yml create profanity1
            sudo -E docker cp ./.circleci/setup/install_client.sh profanity1:/home/install_client.sh
            sudo -E docker cp ./testdata/c1_data/ profanity1:/home/
            sudo -E docker-compose -f .circleci/docker-compose.yml up --no-recreate -d profanity1
            sudo -E docker exec profanity1 /bin/bash -c '/home/install_client.sh'
            sudo -E docker exec -it -d profanity1 profanity -a user1
            sudo -E docker exec profanity1 /bin/bash -c 'until grep -q "logged in successfully" /root/.local/share/profanity/logs/profanity.log; do cat /root/.local/share/profanity/logs/profanity.log; sleep 1; done;'

      - run:
          name: Start XMPP client2
          command: |
            set -x
            sudo -E docker-compose -f .circleci/docker-compose.yml create profanity2
            sudo -E docker cp ./.circleci/setup/install_client.sh profanity2:/home/install_client.sh
            sudo -E docker cp ./testdata/c2_data/ profanity2:/home/
            sudo -E docker-compose -f .circleci/docker-compose.yml up --no-recreate -d profanity2
            sudo -E docker exec profanity2 /bin/bash -c '/home/install_client.sh'
            sudo -E docker exec -it -d profanity2 profanity -a user2
            sudo -E docker exec profanity2 /bin/bash -c 'until grep -q "logged in successfully" /root/.local/share/profanity/logs/profanity.log; do cat /root/.local/share/profanity/logs/profanity.log; sleep 1; done;'

workflows:
  version: 2
  tests:
    jobs:
      - integration
