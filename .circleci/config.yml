# Copyright 2019 ETH Zurich
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  integration:
    docker:
      - image: circleci/python:3.6.1
    working_directory: ~/repo
    environment:
      BASH_ENV: "~/repo/.circleci/bash_env.sh"
      SCION_SRC: "https://github.com/netsec-ethz/netsec-scion"
      SC: "/home/scion/go/src/github.com/scionproto/scion"

    steps:
      - checkout

      - setup_remote_docker:
         docker_layer_caching: true

      - run:
          name: Setup local execution alias
          command: |
            if [[ ${CIRCLE_ENV} == *"local"* ]]; then
              echo "Setting up local execution aliases"
              echo "shopt -s expand_aliases" >> ./${local_env}
              echo "alias docker='sudo -E docker'" >> ./${local_env}
              echo "alias docker-compose='sudo -E docker-compose'" >> ./${local_env}
              # BASH_ENV gets sourced before each run step
            fi

      - run:
          name: Setup coordinator
          command: |
            set -x
            # XXX(matzf) This could probably mount the tested code, instead of fiddly copying.
            # Otherwise, Dockerfile!

            # We first start only the coordinator
            sudo -E docker-compose -f .circleci/docker-compose.yml create coord
            # create is deprecated in v18, use no-start when circleci updates its images
            # docker-compose -f .circleci/docker-compose.yml up --no-start coord
            sudo -E docker cp ./ coord:/home/circleci/repo/scionlab
            sudo -E docker-compose -f .circleci/docker-compose.yml up --no-recreate -d coord

      # Start integration tests
      - run:
          name: Start containers
          command: |
            set -x
            # docker-compose will have started 5 containers, the one with the coordinator will be named `coord`
            # Then we have one core AS container coreAS1301, two infra ASes infraAS1303 and infraAS1305 and
            # a zookeeper instance they share.

            # We start another container with curl in the same network as `coord` to check `coord` is ready.
            # All exposed ports from `coord` are available on `localhost` in this new container.
            sudo -E docker run --net circleci_as_net --name curl_test\
              --rm --entrypoint /bin/bash circleci/buildpack-deps:xenial -c "until curl --retry 5 --retry-delay 1 http://172.31.0.10:8000/login/ 2>/dev/null; do sleep 0.1; done;"

            export coreAS1301IP=172.31.0.110 infraAS1303IP=172.31.0.111 infraAS1305IP=172.31.0.112
            sudo -E docker-compose -f .circleci/docker-compose.yml create zookeeper coreAS1301 infraAS1303 infraAS1305
            sudo -E docker-compose -f .circleci/docker-compose.yml up --no-recreate -d zookeeper coreAS1301 infraAS1303 infraAS1305

      - run:
          name: Check SCION connections
          command: |
            set -x
            # Wait for the SCION services to start
            sudo -E docker exec coreAS1301 /bin/bash -c 'cd ${SC}; until [ `./supervisor/supervisor.sh status | grep RUNNING | wc -l` -ge 6 ]; do sleep 0.1; done;'
            # Wait for beaconing to start
            sudo -E docker exec infraAS1305 /bin/bash -c 'until [ `grep "Successfully verified PCB" -s -r ${SC}/logs/ | wc -l` -ge 5 ]; do sleep 0.1; done; ${SC}/bin/scmp echo -c 10 -local 19-ffaa:0:1305,[127.0.0.1] -remote 19-ffaa:0:1301,[127.0.0.1];'
            sudo -E docker exec coreAS1301 /bin/bash -c "${SC}/bin/scmp echo -c 10 -local 19-ffaa:0:1301,[127.0.0.1] -remote 19-ffaa:0:1303,[127.0.0.1]"
            sudo -E docker exec infraAS1303 /bin/bash -c "grep -m 5 'Successfully verified PCB' -r ${SC}/logs/; ${SC}/bin/scmp echo -c 10 -local 19-ffaa:0:1303,[127.0.0.1] -remote 19-ffaa:0:1301,[127.0.0.1];"

workflows:
  version: 2
  tests:
    jobs:
      - integration
